import React, { useState, useEffect } from 'react';
import { Input } from '@/src/components/ui/input';
import { Button } from '@/src/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/src/components/ui/select';
import { AlertCircle } from 'lucide-react';
import { cn } from '@/src/lib/utils';
import { styles } from './setup-wizard.styles';
import { SecuritySetupStageProps } from './setup-wizard.types';

/**
 * SecuritySetupStage Component
 * 
 * Second stage of the setup wizard that configures security options
 */
const SecuritySetupStage: React.FC<SecuritySetupStageProps> = ({
  useSystemPin,
  setUseSystemPin,
  systemPin,
  setSystemPin,
  confirmSystemPin,
  setConfirmSystemPin,
  caretakers,
  setCaretakers,
  newCaretaker,
  setNewCaretaker,
  addCaretaker,
  removeCaretaker
}) => {
  const [loginIdError, setLoginIdError] = useState('');
  const [isAccountAuth, setIsAccountAuth] = useState(false);
  const [accountName, setAccountName] = useState('');
  const [hasAutoGeneratedLoginId, setHasAutoGeneratedLoginId] = useState(false);

  // Check for account authentication and auto-populate fields
  useEffect(() => {
    const checkAccountAuth = () => {
      const authToken = localStorage.getItem('authToken');
      if (!authToken) return;

      try {
        // Decode token to check if it's account auth
        const base64Url = authToken.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
        
        const decoded = JSON.parse(jsonPayload);
        
        if (decoded.isAccountAuth === true) {
          setIsAccountAuth(true);
          
          // Get account user info from localStorage
          const accountUser = localStorage.getItem('accountUser');
          if (accountUser) {
            const user = JSON.parse(accountUser);
            setAccountName(user.firstName);
            
            // Auto-populate the new caretaker name if it's empty (for when they choose caretaker mode)
            if (!newCaretaker.name) {
              setNewCaretaker(prev => ({
                ...prev,
                name: user.firstName,
                type: 'Account Owner',
                role: 'ADMIN'
              }));
            }
          }
          
          // Generate a random login ID if none exists (for when they choose caretaker mode)
          if (!newCaretaker.loginId || newCaretaker.loginId === '') {
            const generateRandomLoginId = () => {
              // Generate a random 2-digit number between 10-99, avoiding 00
              let randomId: number;
              do {
                randomId = Math.floor(Math.random() * 90) + 10; // 10-99
              } while (randomId.toString() === '00' || caretakers.some(c => c.loginId === randomId.toString()));
              
              return randomId.toString();
            };
            
            const generatedId = generateRandomLoginId();
            setNewCaretaker(prev => ({
              ...prev,
              loginId: generatedId
            }));
            setHasAutoGeneratedLoginId(true);
          }
        }
      } catch (error) {
        console.error('Error checking account auth:', error);
      }
    };

    checkAccountAuth();
  }, []);

  // Validate login ID
  const validateLoginId = (loginId: string) => {
    if (!loginId) {
      setLoginIdError('');
      return true;
    }
    
    if (!/^\d+$/.test(loginId)) {
      setLoginIdError('Login ID must contain only digits');
      return false;
    }
    
    if (loginId === '00') {
      setLoginIdError('Login ID "00" is reserved for system use');
      return false;
    }
    
    if (caretakers.some(c => c.loginId === loginId)) {
      setLoginIdError('This Login ID is already taken');
      return false;
    }
    
    setLoginIdError('');
    return true;
  };

  // Handle login ID change with validation
  const handleLoginIdChange = (value: string) => {
    if (value.length <= 2) {
      setNewCaretaker({ ...newCaretaker, loginId: value });
      validateLoginId(value);
    }
  };
  return (
    <div className={cn(styles.stageContainer, "setup-wizard-stage-container")}>
      <h2 className={cn(styles.stageTitle, "setup-wizard-stage-title")}>
        Security Setup
      </h2>
      
      {isAccountAuth && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <h3 className="text-blue-900 font-semibold mb-2">Account Owner Setup</h3>
          <p className="text-blue-800 text-sm">
            Choose how you want to access your family tracker. You can use a simple system-wide PIN that everyone shares, 
            or create personal login credentials for yourself (and later add other family members with their own logins).
          </p>
        </div>
      )}
      
      <div className={cn(styles.securityOptionsContainer, "setup-wizard-security-options-container")}>
        <div className={cn(styles.securityOption, "setup-wizard-security-option")}>
          <input
            type="radio"
            id="systemPin"
            checked={useSystemPin}
            onChange={() => setUseSystemPin(true)}
            className={cn(styles.formRadio, "setup-wizard-form-radio")}
          />
          <label 
            htmlFor="systemPin" 
            className={cn(styles.formRadioLabel, "setup-wizard-form-radio-label")}
          >
            {isAccountAuth ? "Use a simple system-wide PIN" : "Use system-wide PIN"}
          </label>
        </div>
        
        <div className={cn(styles.securityOption, "setup-wizard-security-option")}>
          <input
            type="radio"
            id="caretakers"
            checked={!useSystemPin}
            onChange={() => setUseSystemPin(false)}
            className={cn(styles.formRadio, "setup-wizard-form-radio")}
          />
          <label 
            htmlFor="caretakers" 
            className={cn(styles.formRadioLabel, "setup-wizard-form-radio-label")}
          >
            {isAccountAuth ? "Create personal login credentials" : "Add caretakers with individual PINs"}
          </label>
        </div>
        
        <div className={cn(styles.formHelperText, "setup-wizard-form-helper-text", "mt-2")}>
          <strong>Choose your approach:</strong> {isAccountAuth 
            ? "System-wide PIN is simpler (everyone uses the same PIN), while personal credentials provide better activity tracking and individual access control. You can add additional family members later."
            : "If any caretakers exist in the system, the system-wide PIN option will be disabled. We recommend adding caretakers for all users who will be using the app, as this provides better tracking of who performed each activity and allows for individual access control."
          }
        </div>
      </div>
      
      {useSystemPin ? (
        <div className={cn(styles.securityPinContainer, "setup-wizard-security-pin-container")}>
          <div className={cn(styles.formGroup, "setup-wizard-form-group")}>
            <label 
              className={cn(styles.formLabel, "setup-wizard-form-label")}
              htmlFor="systemPin"
            >
              {isAccountAuth ? "System-wide PIN (6-10 digits)" : "System PIN (6-10 digits)"}
            </label>
            <Input
              id="systemPin"
              type="password"
              value={systemPin}
              onChange={(e) => {
                const value = e.target.value.replace(/\D/g, '');
                if (value.length <= 10) {
                  setSystemPin(value);
                }
              }}
              placeholder={isAccountAuth ? "Enter system-wide PIN" : "Enter PIN"}
              className={cn(styles.formInput, "setup-wizard-form-input")}
              minLength={6}
              maxLength={10}
            />
          </div>
          <div className={cn(styles.formGroup, "setup-wizard-form-group")}>
            <label 
              className={cn(styles.formLabel, "setup-wizard-form-label")}
              htmlFor="confirmSystemPin"
            >
              Confirm PIN
            </label>
            <Input
              id="confirmSystemPin"
              type="password"
              value={confirmSystemPin}
              onChange={(e) => {
                const value = e.target.value.replace(/\D/g, '');
                if (value.length <= 10) {
                  setConfirmSystemPin(value);
                }
              }}
              placeholder={isAccountAuth ? "Confirm system-wide PIN" : "Confirm PIN"}
              className={cn(styles.formInput, "setup-wizard-form-input")}
              minLength={6}
              maxLength={10}
            />
          </div>
        </div>
      ) : (
        <div className={cn(styles.securityPinContainer, "setup-wizard-security-pin-container")}>
          <div className={cn(styles.caretakerContainer, "setup-wizard-caretaker-container")}>
            <h3 className={cn(styles.caretakerTitle, "setup-wizard-caretaker-title")}>
              {isAccountAuth ? "Your Personal Profile" : "Add Caretaker"}
            </h3>
            {isAccountAuth && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-3 mb-4">
                <p className="text-green-800 text-sm">
                  <strong>Setup your personal login:</strong> We've pre-filled your information below. 
                  {hasAutoGeneratedLoginId && " Your login ID has been randomly generated for security."} 
                  Just set your personal PIN and you'll be ready to go!
                </p>
              </div>
            )}
            <div className={cn(styles.caretakerGrid, "setup-wizard-caretaker-grid")}>
              <div>
                <label 
                  className={cn(styles.formLabel, "setup-wizard-form-label")}
                  htmlFor="loginId"
                >
                  {isAccountAuth ? "Your Login ID" : "Login ID (2 digits)"}
                </label>
                <div className="space-y-1">
                  <Input
                    id="loginId"
                    value={newCaretaker.loginId}
                    onChange={(e) => handleLoginIdChange(e.target.value)}
                    placeholder={isAccountAuth ? "Auto-generated" : "e.g., 01, 12, 99"}
                    className={cn(
                      styles.formInput, 
                      "setup-wizard-form-input",
                      loginIdError ? 'border-red-500' : '',
                      isAccountAuth ? 'bg-gray-50' : ''
                    )}
                    maxLength={2}
                    readOnly={isAccountAuth && hasAutoGeneratedLoginId}
                    title={isAccountAuth && hasAutoGeneratedLoginId ? "This ID was automatically generated for you" : undefined}
                  />
                  {loginIdError && (
                    <div className="flex items-center gap-1 text-red-600 text-xs">
                      <AlertCircle className="h-3 w-3" />
                      {loginIdError}
                    </div>
                  )}
                  <p className={cn(styles.formHelperText, "setup-wizard-form-helper-text")}>
                    {isAccountAuth 
                      ? hasAutoGeneratedLoginId 
                        ? "This unique ID was automatically generated for your security."
                        : "Your personal login ID - you can modify this if desired."
                      : "Use digits only (01-99). Cannot use \"00\" (reserved for system)."
                    }
                  </p>
                </div>
              </div>
              {!isAccountAuth && (
                <div>
                  <label 
                    className={cn(styles.formLabel, "setup-wizard-form-label")}
                    htmlFor="role"
                  >
                    Role
                  </label>
                  <Select
                    value={newCaretaker.role}
                    onValueChange={(value) => 
                      setNewCaretaker({ 
                        ...newCaretaker, 
                        role: value as 'ADMIN' | 'USER' 
                      })
                    }
                    disabled={caretakers.length === 0} // Disable for first caretaker
                  >
                    <SelectTrigger 
                      id="role"
                      className={cn(styles.formSelect, "setup-wizard-form-select")}
                    >
                      <SelectValue placeholder="Select role" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ADMIN">Admin</SelectItem>
                      <SelectItem value="USER">User</SelectItem>
                    </SelectContent>
                  </Select>
                  {caretakers.length === 0 && (
                    <p className={cn(styles.formWarningText, "setup-wizard-form-warning-text")}>
                      First caretaker must be an admin
                    </p>
                  )}
                </div>
              )}
            </div>
            <div className={cn(styles.formGroup, "setup-wizard-form-group")}>
              <label 
                className={cn(styles.formLabel, "setup-wizard-form-label")}
                htmlFor="name"
              >
                {isAccountAuth ? "Your Name" : "Name"}
              </label>
              <Input
                id="name"
                value={newCaretaker.name}
                onChange={(e) => 
                  setNewCaretaker({ ...newCaretaker, name: e.target.value })
                }
                placeholder={isAccountAuth ? "Your account name" : "Full name"}
                className={cn(
                  styles.formInput, 
                  "setup-wizard-form-input",
                  isAccountAuth ? 'bg-gray-50' : ''
                )}
                readOnly={isAccountAuth}
                title={isAccountAuth ? "This is taken from your account information" : undefined}
              />
            </div>
            <div className={cn(styles.caretakerGrid, "setup-wizard-caretaker-grid")}>
              <div>
                <label 
                  className={cn(styles.formLabel, "setup-wizard-form-label")}
                  htmlFor="securityPin"
                >
                  {isAccountAuth ? "Your Personal PIN (6-10 digits)" : "PIN (6-10 digits)"}
                </label>
                <Input
                  id="securityPin"
                  type="password"
                  value={newCaretaker.securityPin}
                  onChange={(e) => {
                    const value = e.target.value.replace(/\D/g, '');
                    if (value.length <= 10) {
                      setNewCaretaker({ ...newCaretaker, securityPin: value });
                    }
                  }}
                  placeholder="PIN"
                  className={cn(styles.formInput, "setup-wizard-form-input")}
                  minLength={6}
                  maxLength={10}
                />
              </div>
              {!isAccountAuth && (
                <div>
                  <label 
                    className={cn(styles.formLabel, "setup-wizard-form-label")}
                    htmlFor="type"
                  >
                    Type (Optional)
                  </label>
                  <Input
                    id="type"
                    value={newCaretaker.type}
                    onChange={(e) => 
                      setNewCaretaker({ ...newCaretaker, type: e.target.value })
                    }
                    placeholder="Parent, Nanny, etc."
                    className={cn(styles.formInput, "setup-wizard-form-input")}
                  />
                </div>
              )}
            </div>
            <Button 
              onClick={addCaretaker}
              className="w-full mt-4"
            >
              {isAccountAuth ? "Create Your Profile" : "Add Caretaker"}
            </Button>
          </div>
          
          {caretakers.length > 0 && (
            <div className={cn(styles.formGroup, "setup-wizard-form-group")}>
              <h3 className={cn(styles.caretakerTitle, "setup-wizard-caretaker-title")}>
                Caretakers
              </h3>
              <ul className={cn(styles.caretakerList, "setup-wizard-caretaker-list")}>
                {caretakers.map((caretaker, index) => (
                  <li 
                    key={index} 
                    className={cn(styles.caretakerItem, "setup-wizard-caretaker-item")}
                  >
                    <div>
                      <span className={cn(styles.caretakerName, "setup-wizard-caretaker-name")}>
                        {caretaker.name}
                      </span>
                      <span className={cn(styles.caretakerInfo, "setup-wizard-caretaker-info")}>
                        ({caretaker.loginId}) - {caretaker.role}
                      </span>
                    </div>
                    <Button 
                      variant="ghost" 
                      size="sm"
                      onClick={() => removeCaretaker(index)}
                    >
                      Remove
                    </Button>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SecuritySetupStage;
