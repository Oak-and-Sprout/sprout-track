import React, { useState, useEffect } from 'react';
import { Input } from '@/src/components/ui/input';
import { Button } from '@/src/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/src/components/ui/select';
import { AlertCircle } from 'lucide-react';
import { cn } from '@/src/lib/utils';
import { styles } from './setup-wizard.styles';
import { SecuritySetupStageProps } from './setup-wizard.types';

/**
 * SecuritySetupStage Component
 * 
 * Second stage of the setup wizard that configures security options
 */
const SecuritySetupStage: React.FC<SecuritySetupStageProps> = ({
  useSystemPin,
  setUseSystemPin,
  systemPin,
  setSystemPin,
  confirmSystemPin,
  setConfirmSystemPin,
  caretakers,
  setCaretakers,
  newCaretaker,
  setNewCaretaker,
  addCaretaker,
  removeCaretaker
}) => {
  const [loginIdError, setLoginIdError] = useState('');
  const [isAccountAuth, setIsAccountAuth] = useState(false);
  const [accountName, setAccountName] = useState('');
  const [hasAutoGeneratedLoginId, setHasAutoGeneratedLoginId] = useState(false);
  const [accountOwnerAdded, setAccountOwnerAdded] = useState(false);

  // Check for account authentication and auto-populate fields
  useEffect(() => {
    const checkAccountAuth = () => {
      const authToken = localStorage.getItem('authToken');
      if (!authToken) return;

      try {
        // Decode token to check if it's account auth
        const base64Url = authToken.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
        
        const decoded = JSON.parse(jsonPayload);
        
        if (decoded.isAccountAuth === true) {
          setIsAccountAuth(true);
          
          // Get account user info from localStorage
          const accountUser = localStorage.getItem('accountUser');
          if (accountUser) {
            const user = JSON.parse(accountUser);
            setAccountName(user.firstName);
            
            // Auto-populate the new caretaker name if it's empty (for when they choose caretaker mode)
            if (!newCaretaker.name) {
              setNewCaretaker(prev => ({
                ...prev,
                name: user.firstName,
                type: 'Account Owner',
                role: 'ADMIN'
              }));
            }
          }
        }
      } catch (error) {
        console.error('Error checking account auth:', error);
      }
    };

    checkAccountAuth();
  }, []);

  // Validate login ID
  const validateLoginId = (loginId: string) => {
    if (!loginId) {
      setLoginIdError('');
      return true;
    }
    
    if (!/^\d+$/.test(loginId)) {
      setLoginIdError('Login ID must contain only digits');
      return false;
    }
    
    if (loginId === '00') {
      setLoginIdError('Login ID "00" is reserved for system use');
      return false;
    }
    
    if (caretakers.some(c => c.loginId === loginId)) {
      setLoginIdError('This Login ID is already taken');
      return false;
    }
    
    setLoginIdError('');
    return true;
  };

  // Handle login ID change with validation
  const handleLoginIdChange = (value: string) => {
    if (value.length <= 2) {
      setNewCaretaker({ ...newCaretaker, loginId: value });
      validateLoginId(value);
    }
  };

  // Custom addCaretaker function that handles account owner logic
  const handleAddCaretaker = () => {
    // Call the original addCaretaker function
    addCaretaker();
    
    // If this is an account owner adding their first profile, mark them as added
    // and reset the form for additional caretakers
    if (isAccountAuth && !accountOwnerAdded) {
      setAccountOwnerAdded(true);
      
      // Reset the form for adding additional caretakers
      setNewCaretaker({
        loginId: '',
        name: '',
        type: '',
        role: 'USER', // Default to USER for additional caretakers
        securityPin: '',
      });
      setHasAutoGeneratedLoginId(false);
      setLoginIdError('');
    }
  };
  return (
    <div className={cn(styles.stageContainer, "setup-wizard-stage-container")}>
      <h2 className={cn(styles.stageTitle, "setup-wizard-stage-title")}>
        Security Setup
      </h2>
      
      {isAccountAuth && !accountOwnerAdded && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
          <p className="text-blue-800 text-sm">
            Choose a simple shared PIN or create personal login credentials with better tracking.
          </p>
        </div>
      )}
      
      <div className={cn(styles.securityOptionsContainer, "setup-wizard-security-options-container")}>
        <div className={cn(styles.securityOption, "setup-wizard-security-option")}>
          <input
            type="radio"
            id="systemPin"
            checked={useSystemPin}
            onChange={() => setUseSystemPin(true)}
            className={cn(styles.formRadio, "setup-wizard-form-radio")}
          />
          <label 
            htmlFor="systemPin" 
            className={cn(styles.formRadioLabel, "setup-wizard-form-radio-label")}
          >
            {isAccountAuth ? "Use a simple system-wide PIN" : "Use system-wide PIN"}
          </label>
        </div>
        
        <div className={cn(styles.securityOption, "setup-wizard-security-option")}>
          <input
            type="radio"
            id="caretakers"
            checked={!useSystemPin}
            onChange={() => setUseSystemPin(false)}
            className={cn(styles.formRadio, "setup-wizard-form-radio")}
          />
          <label 
            htmlFor="caretakers" 
            className={cn(styles.formRadioLabel, "setup-wizard-form-radio-label")}
          >
            {isAccountAuth ? "Create personal login credentials" : "Add caretakers with individual PINs"}
          </label>
        </div>
        
        <div className={cn(styles.formHelperText, "setup-wizard-form-helper-text", "mt-2")}>
          {isAccountAuth 
            ? "System-wide PIN: everyone uses the same PIN. Personal credentials: better tracking and individual access."
            : "Individual PINs provide better activity tracking and access control."
          }
        </div>
      </div>
      
      {useSystemPin ? (
        <div className={cn(styles.securityPinContainer, "setup-wizard-security-pin-container")}>
          <div className={cn(styles.formGroup, "setup-wizard-form-group")}>
            <label 
              className={cn(styles.formLabel, "setup-wizard-form-label")}
              htmlFor="systemPin"
            >
              {isAccountAuth ? "System-wide PIN (6-10 digits)" : "System PIN (6-10 digits)"}
            </label>
            <Input
              id="systemPin"
              type="password"
              value={systemPin}
              onChange={(e) => {
                const value = e.target.value.replace(/\D/g, '');
                if (value.length <= 10) {
                  setSystemPin(value);
                }
              }}
              placeholder={isAccountAuth ? "Enter system-wide PIN" : "Enter PIN"}
              className={cn(styles.formInput, "setup-wizard-form-input")}
              minLength={6}
              maxLength={10}
            />
          </div>
          <div className={cn(styles.formGroup, "setup-wizard-form-group")}>
            <label 
              className={cn(styles.formLabel, "setup-wizard-form-label")}
              htmlFor="confirmSystemPin"
            >
              Confirm PIN
            </label>
            <Input
              id="confirmSystemPin"
              type="password"
              value={confirmSystemPin}
              onChange={(e) => {
                const value = e.target.value.replace(/\D/g, '');
                if (value.length <= 10) {
                  setConfirmSystemPin(value);
                }
              }}
              placeholder={isAccountAuth ? "Confirm system-wide PIN" : "Confirm PIN"}
              className={cn(styles.formInput, "setup-wizard-form-input")}
              minLength={6}
              maxLength={10}
            />
          </div>
        </div>
      ) : (
        <div className={cn(styles.securityPinContainer, "setup-wizard-security-pin-container")}>
          <div className={cn(styles.caretakerContainer, "setup-wizard-caretaker-container")}>
            <h3 className={cn(styles.caretakerTitle, "setup-wizard-caretaker-title")}>
              {isAccountAuth && !accountOwnerAdded ? "Your Personal Profile" : isAccountAuth && accountOwnerAdded ? "Add Additional Caretaker" : "Add Caretaker"}
            </h3>
            {isAccountAuth && !accountOwnerAdded && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-3 mb-4">
                <p className="text-green-800 text-sm">
                  Create your personal login credentials. Choose a 2-digit ID and set your PIN.
                </p>
              </div>
            )}
            <div className={cn(styles.caretakerGrid, "setup-wizard-caretaker-grid")}>
              <div>
                <label 
                  className={cn(styles.formLabel, "setup-wizard-form-label")}
                  htmlFor="loginId"
                >
                  {isAccountAuth && !accountOwnerAdded ? "Your Login ID" : "Login ID (2 digits)"}
                </label>
                <div className="space-y-1">
                  <Input
                    id="loginId"
                    value={newCaretaker.loginId}
                    onChange={(e) => handleLoginIdChange(e.target.value)}
                    placeholder={isAccountAuth ? "Enter 2-digit ID" : "e.g., 01, 12, 99"}
                    className={cn(
                      styles.formInput, 
                      "setup-wizard-form-input",
                      loginIdError ? 'border-red-500' : ''
                    )}
                    maxLength={2}
                  />
                  {loginIdError && (
                    <div className="flex items-center gap-1 text-red-600 text-xs">
                      <AlertCircle className="h-3 w-3" />
                      {loginIdError}
                    </div>
                  )}
                  <p className={cn(styles.formHelperText, "setup-wizard-form-helper-text")}>
                    {isAccountAuth 
                      ? "Choose a unique 2-digit ID (01-99) for your login."
                      : "Use digits only (01-99). Cannot use \"00\" (reserved for system)."
                    }
                  </p>
                </div>
              </div>
              {(!isAccountAuth || accountOwnerAdded) && (
                <div>
                  <label 
                    className={cn(styles.formLabel, "setup-wizard-form-label")}
                    htmlFor="role"
                  >
                    Role
                  </label>
                  <Select
                    value={newCaretaker.role}
                    onValueChange={(value) => 
                      setNewCaretaker({ 
                        ...newCaretaker, 
                        role: value as 'ADMIN' | 'USER' 
                      })
                    }
                    disabled={!isAccountAuth && caretakers.length === 0} // Disable for first caretaker in non-account setup
                  >
                    <SelectTrigger 
                      id="role"
                      className={cn(styles.formSelect, "setup-wizard-form-select")}
                    >
                      <SelectValue placeholder="Select role" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ADMIN">Admin</SelectItem>
                      <SelectItem value="USER">User</SelectItem>
                    </SelectContent>
                  </Select>
                  {!isAccountAuth && caretakers.length === 0 && (
                    <p className={cn(styles.formWarningText, "setup-wizard-form-warning-text")}>
                      First caretaker must be an admin
                    </p>
                  )}
                </div>
              )}
            </div>
            {(!isAccountAuth || accountOwnerAdded) && (
              <div className={cn(styles.formGroup, "setup-wizard-form-group")}>
                <label 
                  className={cn(styles.formLabel, "setup-wizard-form-label")}
                  htmlFor="name"
                >
                  Name
                </label>
                <Input
                  id="name"
                  value={newCaretaker.name}
                  onChange={(e) => 
                    setNewCaretaker({ ...newCaretaker, name: e.target.value })
                  }
                  placeholder="Full name"
                  className={cn(styles.formInput, "setup-wizard-form-input")}
                />
              </div>
            )}
            <div className={cn(styles.caretakerGrid, "setup-wizard-caretaker-grid")}>
              <div>
                <label 
                  className={cn(styles.formLabel, "setup-wizard-form-label")}
                  htmlFor="securityPin"
                >
                  {isAccountAuth && !accountOwnerAdded ? "Your Personal PIN (6-10 digits)" : isAccountAuth && accountOwnerAdded ? "New Caretaker PIN (6-10 digits)" : "PIN (6-10 digits)"}
                </label>
                <Input
                  id="securityPin"
                  type="password"
                  value={newCaretaker.securityPin}
                  onChange={(e) => {
                    const value = e.target.value.replace(/\D/g, '');
                    if (value.length <= 10) {
                      setNewCaretaker({ ...newCaretaker, securityPin: value });
                    }
                  }}
                  placeholder="PIN"
                  className={cn(styles.formInput, "setup-wizard-form-input")}
                  minLength={6}
                  maxLength={10}
                />
              </div>
              {!isAccountAuth && (
                <div>
                  <label 
                    className={cn(styles.formLabel, "setup-wizard-form-label")}
                    htmlFor="type"
                  >
                    Type (Optional)
                  </label>
                  <Input
                    id="type"
                    value={newCaretaker.type}
                    onChange={(e) => 
                      setNewCaretaker({ ...newCaretaker, type: e.target.value })
                    }
                    placeholder="Parent, Nanny, etc."
                    className={cn(styles.formInput, "setup-wizard-form-input")}
                  />
                </div>
              )}
            </div>
            <Button 
              onClick={handleAddCaretaker}
              className="w-full mt-4"
            >
              {isAccountAuth && !accountOwnerAdded ? "Create Your Profile" : isAccountAuth && accountOwnerAdded ? "Add Additional Caretaker" : "Add Caretaker"}
            </Button>
          </div>
          
          {caretakers.length > 0 && (
            <div className={cn(styles.formGroup, "setup-wizard-form-group")}>
              <h3 className={cn(styles.caretakerTitle, "setup-wizard-caretaker-title")}>
                Caretakers
              </h3>
              <ul className={cn(styles.caretakerList, "setup-wizard-caretaker-list")}>
                {caretakers.map((caretaker, index) => (
                  <li 
                    key={index} 
                    className={cn(styles.caretakerItem, "setup-wizard-caretaker-item")}
                  >
                    <div>
                      <span className={cn(styles.caretakerName, "setup-wizard-caretaker-name")}>
                        {caretaker.name}
                      </span>
                      <span className={cn(styles.caretakerInfo, "setup-wizard-caretaker-info")}>
                        ({caretaker.loginId}) - {caretaker.role}
                      </span>
                    </div>
                    <Button 
                      variant="ghost" 
                      size="sm"
                      onClick={() => removeCaretaker(index)}
                    >
                      Remove
                    </Button>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SecuritySetupStage;
